"use strict";

const http = require("http");
const zlib = require("zlib");
const xml2json = require("xml2json");

const TV_GUIDE_URL = "http://www.teleguide.info/download/new3/xmltv.xml.gz";
const TV_GUIDE_URL_OLD = "http://www.teleguide.info/download/old/xmltv.xml.gz";
const NO_TITLE = "Нет данных о названии";

const log = console.log.bind(console, "[TVGUIDE]");

const unixTime = date => date / 1000 | 0;

function parseDate(date) {
    // some dirty magic stolen from node-xmltv for parsing xmltv-formatted data
    let matches = /^(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})\s\+(\d{4})$/.exec(date);
    if (matches)
        return unixTime(new Date(matches[1], parseInt(matches[2], 10) - 1, matches[3], matches[4], matches[5], matches[6]));
    return false;
}

function parseAgeRestriction(program) {
    let matches = /\ \(([^)]+)\+\)/.exec(program.title);
    if (matches) {
        program.title = program.title.slice(0, matches.index);
        program.ageRestriction = matches[1];
    }
}


function getGzipped(url, cb) {
    // downloads gzipped file
    http.get(url, function(res) {

        let chunks = [];

        res.on('data', function(chunk) {
            chunks.push(chunk);
        });
        res.on('end', function() {
            let buffer = Buffer.concat(chunks);
            zlib.gunzip(buffer, function(err, decoded) {
                if (err) throw err;
                cb(decoded && decoded.toString());
            });
        });
    });
}

function mergeXMLTVJSON(json, json2) {
    json.tv.channel = json.tv.channel.concat(json2.tv.channel);
    json.tv.programme = json.tv.programme.concat(json2.tv.programme);
}

function toXMLTVJSON(xml) {
    return JSON.parse(xml2json.toJson(xml, {sanitize: false}))
}
let tvGuide = {
    
    channels: {},
    programs: {},

    update: function(callback) {
        log("Updating TV Guide data");
        getGzipped(TV_GUIDE_URL, function(xml) {
            getGzipped(TV_GUIDE_URL_OLD, function(xmlOld) {

                log("Update downloaded, parsing");
                let json = toXMLTVJSON(xml);
                let jsonOld = toXMLTVJSON(xmlOld);
                mergeXMLTVJSON(jsonOld, json);
                tvGuide._updateFromXMTLTVJSON(jsonOld);
                log("Updated");
                if (typeof callback == "function")
                    callback();
            });
        });
    },

    _updateFromXMTLTVJSON(json) {
        //update channels and programs from json generated by xml2js from xmltv file

        let channels = {};
        let programs = {};

        // extract channels
        for (var channelData of json.tv.channel) {

            if (channelData.icon) // channels with no icon suck
                channels[channelData.id] = {
                    name: channelData["display-name"]['$t'],
                    icon: channelData.icon.src
                }
        }

        // extract programs
        for (var programData of json.tv.programme) {

            let program = {
                title: programData.title ? programData.title['$t'] : NO_TITLE,
                start: parseDate(programData.start),
                stop: parseDate(programData.stop)
            };

            if (programData.desc)
                program.desc = programData.desc['$t'];
            if (programData.category)
                program.category = programData.category['$t'];

            parseAgeRestriction(program);

            let channel = programData.channel;

            if (!programs[channel])
                programs[channel] = [];

            programs[channel].push(program);
        }

        // update data
        tvGuide.channels = channels;
        tvGuide.programs = programs;
    }
};

module.exports = tvGuide;